apply plugin: 'java'

repositories {
    mavenCentral()
}

dependencies {
    testCompile group:'junit', name:'junit', version:'4.+'
    testCompile group:'org.hamcrest', name: 'hamcrest-all', version: '1.+'
}

task copyNativeLibs(type: Copy) {
    from('libs') { include '**/*.dylib' }
    into new File(buildDir, 'native-libs')
}

task copyDependingFiles(type: Copy) {
    from('src/test/java') { include '**/*.js' }
    into 'build/classes/test'
}

project.ext.nativesDir = project.buildDir.absolutePath + "/native-libs"
project.ext.XcodeTmpDir = project.buildDir.absolutePath + "/native-tmp"
project.ext.XcodeProjectDir = project.projectDir.absolutePath + "/native/osx"
project.ext.XcodeOutputDir = project.projectDir.absolutePath + "/libs"
project.ext.AndroidProjectDir = project.projectDir.absolutePath + "/native/android"

jar.baseName = 'JavaScriptCore'
version = '0.1-SNAPSHOT'

task osxbuild(type:Exec) {
    commandLine 'xcodebuild','-sdk','macosx10.9','-project',project.ext.XcodeProjectDir+'/JavaScriptCoreJNI.xcodeproj','ONLY_ACTIVE_ARCH=NO','-configuration','Debug','-target','JavaScriptCoreJNI','CONFIGURATION_BUILD_DIR='+project.ext.XcodeOutputDir,'PROJECT_TEMP_DIR='+project.ext.XcodeTmpDir,'build'
    standardOutput = new ByteArrayOutputStream()
    ext.output = {
      return standardOutput.toString()
    }
}

task androidbuild(type:Exec) {
    workingDir project.ext.AndroidProjectDir
    commandLine 'ndk-build'
    standardOutput = new ByteArrayOutputStream()
    ext.output = {
      return standardOutput.toString()
    }
}

tasks.withType(Compile) {
    compileTask -> compileTask.dependsOn copyNativeLibs, copyDependingFiles
}

test {
    systemProperty 'java.library.path', project.ext.nativesDir
    jvmArgs '-verbose:gc'

}

clean.dependsOn 'cleanCopyNativeLibs'
